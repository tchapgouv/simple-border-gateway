name: Build

on:
  push:
    branches:
      - main
      - "release/**"
    tags:
      - "v*"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CARGO_NET_GIT_FETCH_WITH_CLI: "true"
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"
  IMAGE: ghcr.io/tchapgouv/simple-border-gateway
  BUILDCACHE: ghcr.io/tchapgouv/simple-border-gateway/buildcache
  DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

jobs:
  compute-version:
    name: Compute version using git describe
    if: github.event_name == 'push'
    runs-on: ubuntu-24.04

    permissions:
      contents: read

    outputs:
      describe: ${{ steps.git.outputs.describe }}
      timestamp: ${{ steps.git.outputs.timestamp }}

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4.2.2
        with:
          # Need a full clone so that `git describe` reports the right version
          fetch-depth: 0

      - name: Compute version and timestamp out of git history
        id: git
        run: |
          echo "describe=$(git describe --tags --match 'v*.*.*' --always)" >> $GITHUB_OUTPUT
          echo "timestamp=$(git log -1 --format=%ct)" >> $GITHUB_OUTPUT

  build-image:
    name: Build and push Docker image
    if: github.event_name == 'push'
    runs-on: ubuntu-24.04

    outputs:
      metadata: ${{ steps.output.outputs.metadata }}

    permissions:
      contents: read
      packages: write
      id-token: write

    needs:
      - compute-version

    env:
      VERGEN_GIT_DESCRIBE: ${{ needs.compute-version.outputs.describe }}
      SOURCE_DATE_EPOCH: ${{ needs.compute-version.outputs.timestamp }}

    steps:
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: "${{ env.IMAGE }}"
          bake-target: docker-metadata-action
          flavor: |
            latest=auto
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Setup Cosign
        uses: sigstore/cosign-installer@v3.8.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0
        with:
          buildkitd-config-inline: |
            [registry."docker.io"]
              mirrors = ["mirror.gcr.io"]

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: bake
        uses: docker/bake-action@v6.6.0
        with:
          files: |
            ./docker-bake.hcl
            cwd://${{ steps.meta.outputs.bake-file }}
          targets: |
            release
          set: |
            base.output=type=image,push=true
            base.cache-from=type=registry,ref=${{ env.BUILDCACHE }}:buildcache
            base.cache-to=type=registry,ref=${{ env.BUILDCACHE }}:buildcache,mode=max

      - name: Transform bake output
        # This transforms the ouput to an object which looks like this:
        # { release: { digest: "…", tags: ["…", "…"] }, debug: { digest: "…", tags: ["…"] }, … }
        id: output
        run: |
          echo 'metadata<<EOF' >> $GITHUB_OUTPUT
          echo '${{ steps.bake.outputs.metadata }}' | jq -c 'with_entries(select(.value | (type == "object" and has("containerimage.digest")))) | map_values({ digest: .["containerimage.digest"], tags: (.["image.name"] | split(",")) })' >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Sign the images with GitHub Actions provided token
        # Only sign on tags and on commits on main branch
        if: |
          github.event_name != 'pull_request'
          && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')

        env:
          RELEASE_DIGEST: ${{ steps.output.outputs.metadata && fromJSON(steps.output.outputs.metadata).release.digest }}

        run: |-
          cosign sign --yes "$IMAGE@$RELEASE_DIGEST"